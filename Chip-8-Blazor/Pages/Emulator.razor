@page "/emulator"

@using Blazor.Extensions; 
@using Blazor.Extensions.Canvas;
@using Blazor.Extensions.Canvas.Canvas2D;
@using Chip_8_Blazor.Model

<h3>Emulator</h3>
<h4>@(testField)</h4>

<BECanvas Width="512" Height="256" @ref="_canvasReference"></BECanvas>

@code {
    private Canvas2DContext _context;
    protected BECanvasComponent _canvasReference;
    protected String testField = "Hello";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();
        await ClearScreen();

        await RunEmulator();
    }

    private async Task RunEmulator()
    {
        ChipEight chipEight = new ChipEight();
        chipEight.Cycle();

        await DrawScreen(chipEight.Gfx);
    }

    private async Task ClearScreen()
    {
        await this._context.SetFillStyleAsync("white");

        for(int i = 0; i < 16; i++)
        {
            for(int j = 0; j < 32; j++)
            {
                await this._context.FillRectAsync(16 * j, 16 * i, 16, 16);
            }
        }
    }

    private async Task DrawPixel(int x, int y, bool black)
    {
        if (black) await this._context.SetFillStyleAsync("black");
        else await this._context.SetFillStyleAsync("white");

        await this._context.FillRectAsync(16 * x, 16 * y, 16, 16);
    }

    private async Task DrawScreen(byte[] gfx)
    {
        for(int i = 0; i < 16; i++)
        {
            for(int j = 0; j < 32; j++)
            {
                await DrawPixel(j, i, gfx[(16 * i) + j] == 0x00);
            }
        } 
    }
}
